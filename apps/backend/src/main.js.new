const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const OpenAI = require('openai');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.VITE_API_URL || 'http://localhost:5173',
    methods: ['GET', 'POST']
  }
});

app.use(express.json({ limit: '50mb' }));
app.use(cors());

// Initialize OpenAI with API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Audio transcription endpoint
app.post('/transcribe', async (req, res) => {
  let tempFilePath;
  try {
    if (!req.body.audio) {
      return res.status(400).json({ error: 'No audio data provided' });
    }

    // Convert base64 audio to buffer
    const audioBuffer = Buffer.from(req.body.audio, 'base64');

    // Create a temporary file for the audio
    const tempDir = path.join(__dirname, '../temp');

    // Ensure temp directory exists
    try {
      await fs.access(tempDir);
    } catch {
      await fs.mkdir(tempDir, { recursive: true });
    }

    tempFilePath = path.join(tempDir, `audio_${Date.now()}.webm`);
    await fs.writeFile(tempFilePath, audioBuffer);

    // Call Whisper API
    const transcription = await openai.audio.transcriptions.create({
      file: await fs.readFile(tempFilePath),
      model: 'whisper-1',
      language: req.body.language || 'en',
      response_format: 'json'
    });

    res.json({
      text: transcription.text,
      language: req.body.language || 'en',
      confidence: 0.95
    });

  } catch (error) {
    console.error('Whisper transcription error:', error);
    res.status(500).json({ error: 'Transcription failed' });
  } finally {
    // Clean up temp file
    if (tempFilePath) {
      try {
        await fs.unlink(tempFilePath);
      } catch (err) {
        console.error('Error cleaning up temp file:', err);
      }
    }
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    services: {
      openai: process.env.OPENAI_API_KEY ? 'configured' : 'missing_key',
      socket: 'ready'
    }
  });
});

io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);

  socket.on('join-room', (roomId) => {
    socket.join(roomId);
    console.log(`Client ${socket.id} joined room: ${roomId}`);

    // Notify room of new participant
    io.to(roomId).emit('participant-joined', {
      participantId: socket.id,
      timestamp: new Date().toISOString()
    });
  });

  socket.on('caption', (data) => {
    console.log('Received caption:', data.text);
    // Relay caption to all other clients in the room
    socket.to(data.roomId).emit('caption', data);
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
    // Notify room of participant leaving
    io.emit('participant-left', {
      participantId: socket.id,
      timestamp: new Date().toISOString()
    });
  });
});

const PORT = process.env.PORT || 3000;

server.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 Nebula AI Backend running on port ${PORT}`);
  console.log(`📡 WebSocket server ready`);
  console.log(`🏥 Health check: http://localhost:${PORT}/health`);
});